<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode_daily_practice(C++)</title>
      <link href="/2020/03/28/Leetcode-daily-practice/"/>
      <url>/2020/03/28/Leetcode-daily-practice/</url>
      
        <content type="html"><![CDATA[<h3 id="820-单词压缩问题（Medium）"><a href="#820-单词压缩问题（Medium）" class="headerlink" title="820.单词压缩问题（Medium）"></a>820.单词压缩问题（Medium）</h3><p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p><p>例如，如果这个列表是 [“time”, “me”, “bell”]，我们就可以将其表示为 S = “time#bell#” 和 indexes = [0, 2, 5]。</p><p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p><p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p><p><strong>示例：</strong></p><p>输入: words = [“time”, “me”, “bell”]<br>输出: 10<br>说明: S = “time#bell#” ， indexes = [0, 2, 5] 。</p><p><strong>提示：</strong></p><p>1 &lt;= words.length &lt;= 2000<br>1 &lt;= words[i].length &lt;= 7<br>每个单词都是小写字母 。</p><h3 id="717-1比特和2比特字符"><a href="#717-1比特和2比特字符" class="headerlink" title="717.1比特和2比特字符"></a>717.1比特和2比特字符</h3><p>有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或 11)来表示。</p><p>现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">bits &#x3D; [1, 0, 0]</span><br><span class="line">输出: True</span><br><span class="line">解释: </span><br><span class="line">唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">bits &#x3D; [1, 1, 1, 0]</span><br><span class="line">输出: False</span><br><span class="line">解释: </span><br><span class="line">唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1 &lt;= len(bits) &lt;= 1000.`</p><p><code>bits[i] 总是0 或 1.</code></p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bits)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从倒数第二项开始，统计连续1的个数</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">bit</span>.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &gt;= <span class="number">0</span> &amp;&amp; bits[i] == <span class="number">1</span>) i--;</span><br><span class="line">    <span class="comment">//若连续1的个数为奇数，则最后一项必然为2比特，否则为1比特</span></span><br><span class="line">    <span class="keyword">return</span> (bits.<span class="built_in">size</span>() - i)%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1386-两个数组间的距离值"><a href="#1386-两个数组间的距离值" class="headerlink" title="1386.两个数组间的距离值"></a>1386.两个数组间的距离值</h3><p>给你两个整数数组 <code>arr1</code> ， <code>arr2</code> 和一个整数 <code>d</code> ，请你返回两个数组之间的 <strong>距离值</strong> 。</p><p>「<strong>距离值</strong>」 定义为符合此描述的元素数目：对于元素 <code>arr1[i]</code> ，不存在任何元素 <code>arr2[j]</code> 满足 <code>|arr1[i]-arr2[j]| &lt;= d</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [4,5,8], arr2 &#x3D; [10,9,1,8], d &#x3D; 2</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">对于 arr1[0]&#x3D;4 我们有：</span><br><span class="line">|4-10|&#x3D;6 &gt; d&#x3D;2 </span><br><span class="line">|4-9|&#x3D;5 &gt; d&#x3D;2 </span><br><span class="line">|4-1|&#x3D;3 &gt; d&#x3D;2 </span><br><span class="line">|4-8|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">对于 arr1[1]&#x3D;5 我们有：</span><br><span class="line">|5-10|&#x3D;5 &gt; d&#x3D;2 </span><br><span class="line">|5-9|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">|5-1|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">|5-8|&#x3D;3 &gt; d&#x3D;2</span><br><span class="line">对于 arr1[2]&#x3D;8 我们有：</span><br><span class="line">|8-10|&#x3D;2 &lt;&#x3D; d&#x3D;2</span><br><span class="line">|8-9|&#x3D;1 &lt;&#x3D; d&#x3D;2</span><br><span class="line">|8-1|&#x3D;7 &gt; d&#x3D;2</span><br><span class="line">|8-8|&#x3D;0 &lt;&#x3D; d&#x3D;2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [1,4,2,3], arr2 &#x3D; [-4,-3,6,10,20,30], d &#x3D; 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [2,1,100,3], arr2 &#x3D; [-5,-2,10,-3,7], d &#x3D; 6</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li><li><code>-10^3 &lt;= arr1[i], arr2[j] &lt;= 10^3</code></li><li><code>0 &lt;= d &lt;= 100</code></li></ul><p><strong>算法1:线性扫描</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findthevalue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = arr1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr2.<span class="built_in">size</span>(); ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(arr1[i] - arr[j]) &lt;= d)&#123;</span><br><span class="line">          cnt--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法2:二分查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findthevalue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="comment">//对arr2进行排序，使用STL中的排序算法，之后即可使用二分法</span></span><br><span class="line">    sort(arr2.<span class="built_in">begin</span>(), arr2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> cnt = arr1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      <span class="comment">//使用STL库中的二分查找,得到距离</span></span><br><span class="line">      <span class="comment">//复习lower_bound的参数（数组开始，数组末尾，查找元素）</span></span><br><span class="line">      <span class="comment">//运用unsigned型变量可以直接使用距离绝对值</span></span><br><span class="line">      <span class="keyword">unsigned</span> p = lower_bound(arr2.<span class="built_in">begin</span>(), arr2.<span class="built_in">end</span>(), arr1[i]) - arr2.<span class="built_in">begin</span>();</span><br><span class="line">      book ok = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//下述步骤的学习需巩固lower_bound的相关特性。</span></span><br><span class="line">      <span class="comment">//如果能够在区间内找到接近的p值，则看最接近的值是否小于距离</span></span><br><span class="line">      <span class="keyword">if</span> (p &lt; arr2.<span class="built_in">size</span>()) ok &amp;= (arr2[p] - arr1[i] &gt; d);</span><br><span class="line">      <span class="comment">//如果p被截断，则直接看最大元素即可</span></span><br><span class="line">      <span class="keyword">if</span> (p - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; p - <span class="number">1</span> &lt;= arr2.<span class="built_in">size</span>()) ok &amp;= (arr[i] - arr[p - <span class="number">1</span>] &gt; d);</span><br><span class="line">      cnt += ok;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>STL：lower_bound算法（复杂度$O(n)$）</strong></p><p>（1）一共有三个参数：（开头，末尾，查找的值），可以用A.begin()和A.end()指定范围；</p><p>（2）返回值为<strong>不小于查找值</strong>的元素所在位置的编号（注意，编号从0开始）；否则越界截断；</p><p>（3）使用lower_bound算法需要注意两点：处理的数列已排序（sort算法），调用Algorithm库；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2020/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="第一阶段（3月28日至正式开学）"><a href="#第一阶段（3月28日至正式开学）" class="headerlink" title="第一阶段（3月28日至正式开学）"></a>第一阶段（3月28日至正式开学）</h1><p>教材：《挑战程序设计竞赛2：算法和数据结构》</p><h3 id="第0部分：基本数据结构"><a href="#第0部分：基本数据结构" class="headerlink" title="第0部分：基本数据结构"></a>第0部分：基本数据结构</h3><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h3 id="第一部分：排序"><a href="#第一部分：排序" class="headerlink" title="第一部分：排序"></a>第一部分：排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><h4 id="归并排序：时间复杂度-O-n-log-n"><a href="#归并排序：时间复杂度-O-n-log-n" class="headerlink" title="归并排序：时间复杂度$O(n\log n)$"></a>归并排序：时间复杂度$O(n\log n)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENTIVITY 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L[MAX/<span class="number">2</span>+<span class="number">1</span>],R[MAX/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = mid - left;</span><br><span class="line">    <span class="keyword">int</span> n2 = right - mid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) L[i] = A[left + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; ++j) R[j] = A[mid + j];<span class="comment">//开辟两个独立数组，存储数据</span></span><br><span class="line">    L[n1] = R[n2] = SENTIVITY;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt; right; ++k)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j])&#123;</span><br><span class="line">            A[k] = L[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[k] = R[j++];</span><br><span class="line">        &#125;<span class="comment">//数据按照大小依次插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left+<span class="number">1</span> &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        mergesort(A, n, left, mid);<span class="comment">//前半部分排序</span></span><br><span class="line">        mergesort(A, n, mid, right);<span class="comment">//后半部分排序</span></span><br><span class="line">        merge(A, n, left, mid, right);<span class="comment">//融合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAX], n, i;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mergesort(A, n, <span class="number">0</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,A[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序：时间复杂度-O-n-log-n"><a href="#快速排序：时间复杂度-O-n-log-n" class="headerlink" title="快速排序：时间复杂度$O(n\log n)$"></a>快速排序：时间复杂度$O(n\log n)$</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;分割算法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;快排算法</span><br><span class="line">quickSort(A,p,r)</span><br><span class="line">    if p&lt;r</span><br><span class="line">         q&#x3D;partition(A,p,r)</span><br><span class="line">         quicksort(A,p,q-1)</span><br><span class="line">         quicksort(A,q+1,r)</span><br></pre></td></tr></table></figure><p>STL的Algorithm库中使用的也是快速排序算法，但快速排序本身是一种不稳定的算法。</p><h4 id="逆序数问题"><a href="#逆序数问题" class="headerlink" title="逆序数问题"></a>逆序数问题</h4><p>（1）基于冒泡排序实现：简单但时间复杂度高$O(n^2)$;</p><p>（2）基于归并排序实现：用到分治策略，时间复杂度$O(n\log n)$;</p><h4 id="最小成本排序问题（考虑到单次操作的权重）"><a href="#最小成本排序问题（考虑到单次操作的权重）" class="headerlink" title="最小成本排序问题（考虑到单次操作的权重）"></a>最小成本排序问题（考虑到单次操作的权重）</h4><h3 id="第二部分：数"><a href="#第二部分：数" class="headerlink" title="第二部分：数"></a>第二部分：数</h3><h4 id="第八章：树"><a href="#第八章：树" class="headerlink" title="第八章：树"></a>第八章：树</h4><h4 id="第九章：二叉搜索树"><a href="#第九章：二叉搜索树" class="headerlink" title="第九章：二叉搜索树"></a>第九章：二叉搜索树</h4><h4 id="第十章：堆"><a href="#第十章：堆" class="headerlink" title="第十章：堆"></a>第十章：堆</h4><h4 id="第十一章：动态规划法"><a href="#第十一章：动态规划法" class="headerlink" title="第十一章：动态规划法"></a>第十一章：动态规划法</h4><h3 id="第三部分：图"><a href="#第三部分：图" class="headerlink" title="第三部分：图"></a>第三部分：图</h3><h4 id="第十二章：图"><a href="#第十二章：图" class="headerlink" title="第十二章：图"></a>第十二章：图</h4><h4 id="第十三章：加权图"><a href="#第十三章：加权图" class="headerlink" title="第十三章：加权图"></a>第十三章：加权图</h4><h3 id="第四部分：算法导论"><a href="#第四部分：算法导论" class="headerlink" title="第四部分：算法导论"></a>第四部分：算法导论</h3><h3 id="第五部分：冲刺——王道考研"><a href="#第五部分：冲刺——王道考研" class="headerlink" title="第五部分：冲刺——王道考研"></a>第五部分：冲刺——王道考研</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 保研ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六学期学习计划（日更）</title>
      <link href="/2020/03/26/%E7%AC%AC%E5%85%AD%E5%AD%A6%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%97%A5%E6%9B%B4%EF%BC%89/"/>
      <url>/2020/03/26/%E7%AC%AC%E5%85%AD%E5%AD%A6%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%97%A5%E6%9B%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="3月27日"><a href="#3月27日" class="headerlink" title="3月27日"></a>3月27日</h2><p>（1）收集CPI与PPI数据（完成）</p><p>（2）学习《高级排序》一章</p><p>（3）leetcode简单题两道</p><p>（4）完成固体物理（非编程）作业</p><p>（5）阅读量子指纹识别第二篇论文</p><p>（6）COLT-Zhang-2019</p><h2 id="3月26日（完成率：66-）"><a href="#3月26日（完成率：66-）" class="headerlink" title="3月26日（完成率：66%）"></a>3月26日（完成率：66%）</h2><p>（1）早上一二节：数据结构与算法（完成）</p><p>（2）早上三四节：机器学习（完成）</p><p>（3）中午：助理研究项目纠错（完成）</p><p>（4）下午一二节：固体物理（完成）</p><p>（5）下午三四节：学习推荐系统实践</p><p>（6）晚上：大创数据+量子信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘笔记</title>
      <link href="/2020/02/19/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/02/19/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="PART-I-INTRODUCTION"><a href="#PART-I-INTRODUCTION" class="headerlink" title="PART I INTRODUCTION"></a>PART I INTRODUCTION</h1><p>第四范式：基于数据认知，世界中每一个对象都对应于数据；</p><h2 id="2月19日"><a href="#2月19日" class="headerlink" title="2月19日"></a>2月19日</h2><p>Advances in technology：Hardware, software, internet;</p><p>Big data have big values;</p><h3 id="Why-Data-Mining"><a href="#Why-Data-Mining" class="headerlink" title="Why Data Mining?"></a>Why Data Mining?</h3><p>Knowledge, hidden relationships, underlying reality;</p><h5 id="Example-I-Mining-supermarket-transactions"><a href="#Example-I-Mining-supermarket-transactions" class="headerlink" title="Example I Mining supermarket transactions"></a>Example I Mining supermarket transactions</h5><h5 id="Example-II-Mining-the-valuable-customers"><a href="#Example-II-Mining-the-valuable-customers" class="headerlink" title="Example II Mining the valuable customers"></a>Example II Mining the valuable customers</h5><h5 id="Example-III-Mining-network-intrusion-patterns"><a href="#Example-III-Mining-network-intrusion-patterns" class="headerlink" title="Example III Mining network intrusion patterns"></a>Example III Mining network intrusion patterns</h5><h5 id="Example-IV-Mining-gene-data"><a href="#Example-IV-Mining-gene-data" class="headerlink" title="Example IV Mining gene data"></a>Example IV Mining gene data</h5><h5 id="Example-V-Mining-medical-data"><a href="#Example-V-Mining-medical-data" class="headerlink" title="Example V Mining medical data"></a>Example V Mining medical data</h5><p>computer-aided diagnosis;</p><h5 id="Example-VI-Mining-the-web"><a href="#Example-VI-Mining-the-web" class="headerlink" title="Example VI Mining the web"></a>Example VI Mining the web</h5><p>web structure, web content, web usage, web logs</p><p>interesting patterns, behavior identification</p><h5 id="Example-VII-Mining-financial-data"><a href="#Example-VII-Mining-financial-data" class="headerlink" title="Example VII Mining financial data"></a>Example VII Mining financial data</h5><p>fraud detection</p><p>stock trends discovery </p><h5 id="Example-VIII-Mining-software-data"><a href="#Example-VIII-Mining-software-data" class="headerlink" title="Example VIII Mining software data"></a>Example VIII Mining software data</h5><p>improve the software quality, productivity and user experience</p><p>automated debugging</p><h5 id="Example-IX-Mining-usage-data"><a href="#Example-IX-Mining-usage-data" class="headerlink" title="Example IX Mining usage data"></a>Example IX Mining usage data</h5><h5 id="Example-X-Mining-data-from-sensors"><a href="#Example-X-Mining-data-from-sensors" class="headerlink" title="Example X Mining data from sensors"></a>Example X Mining data from sensors</h5><p>技术要自主可控；</p><h5 id="Example-XI-Mining-data-of-arts"><a href="#Example-XI-Mining-data-of-arts" class="headerlink" title="Example XI Mining data of arts"></a>Example XI Mining data of arts</h5><h5 id="Example-XII-Audio-Generation"><a href="#Example-XII-Audio-Generation" class="headerlink" title="Example XII Audio Generation"></a>Example XII Audio Generation</h5><h5 id="Example-XIII-Image-Video-Editing"><a href="#Example-XIII-Image-Video-Editing" class="headerlink" title="Example XIII Image/Video Editing"></a>Example XIII Image/Video Editing</h5><p>more and more applications</p><p>对于不同的数据，性质不同，分析的技术不同；</p><p>Data mining is non-trivial process of identifying valid, novel, potentially useful, and ultimately understandable.</p><p>core: machine learning</p><h3 id="KDD-Knowledge-Discoverty-in-Data"><a href="#KDD-Knowledge-Discoverty-in-Data" class="headerlink" title="KDD: Knowledge Discoverty in Data"></a>KDD: Knowledge Discoverty in Data</h3><h3 id="What-kind-of-data-can-be-mined"><a href="#What-kind-of-data-can-be-mined" class="headerlink" title="What kind of data can be mined?"></a>What kind of data can be mined?</h3><p>(1) “Flat” data: table or data matrix</p><p><em>Attribute varible fields features</em></p><p>(2) Data warehouse: statistic option, data language (make decisions)</p><p>(3) Text data</p><p>(4) Multimedia data: image, audio, video</p><p>(5) Web date</p><p>(6) Social network data</p><p>(7) Temporal and spatial data</p><h3 id="How-to-categorize-data-mining-tasks"><a href="#How-to-categorize-data-mining-tasks" class="headerlink" title="How to categorize data mining tasks?"></a>How to categorize data mining tasks?</h3><p>(1) Descriptive mining tasks.</p><p>(2) Predictive mining tasks.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS精英挑战营（2020年寒假班）</title>
      <link href="/2020/02/02/CS%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%90%A5/"/>
      <url>/2020/02/02/CS%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%90%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习导论</title>
      <link href="/2020/02/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/02/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
