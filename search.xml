<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣刷题日记</title>
      <link href="/2020/04/03/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/04/03/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="4月3日"><a href="#4月3日" class="headerlink" title="4月3日"></a>4月3日</h3><p>（1）对于数组、vector、list等一定要记得考虑为空的情况；</p><p>（2）对于无序的数组，可以尝试先排序再处理，思路会简单些；</p><h4 id="4月4日"><a href="#4月4日" class="headerlink" title="4月4日"></a>4月4日</h4><p>接雨水问题可以按照行来求，关键想清楚其中的几何构型</p><h4 id="4月5日"><a href="#4月5日" class="headerlink" title="4月5日"></a>4月5日</h4><p>单调栈：用于对特定元素的后方的大小排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> 备战保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_daily_practice(C++)</title>
      <link href="/2020/03/28/Leetcode-daily-practice/"/>
      <url>/2020/03/28/Leetcode-daily-practice/</url>
      
        <content type="html"><![CDATA[<h3 id="717-1比特和2比特字符"><a href="#717-1比特和2比特字符" class="headerlink" title="717.1比特和2比特字符"></a>717.1比特和2比特字符</h3><p>有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或 11)来表示。</p><p>现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">bits &#x3D; [1, 0, 0]</span><br><span class="line">输出: True</span><br><span class="line">解释: </span><br><span class="line">唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">bits &#x3D; [1, 1, 1, 0]</span><br><span class="line">输出: False</span><br><span class="line">解释: </span><br><span class="line">唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1 &lt;= len(bits) &lt;= 1000.`</p><p><code>bits[i] 总是0 或 1.</code></p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bits)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从倒数第二项开始，统计连续1的个数</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">bit</span>.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &gt;= <span class="number">0</span> &amp;&amp; bits[i] == <span class="number">1</span>) i--;</span><br><span class="line">    <span class="comment">//若连续1的个数为奇数，则最后一项必然为2比特，否则为1比特</span></span><br><span class="line">    <span class="keyword">return</span> (bits.<span class="built_in">size</span>() - i)%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1386-两个数组间的距离值"><a href="#1386-两个数组间的距离值" class="headerlink" title="1386.两个数组间的距离值"></a>1386.两个数组间的距离值</h3><p>给你两个整数数组 <code>arr1</code> ， <code>arr2</code> 和一个整数 <code>d</code> ，请你返回两个数组之间的 <strong>距离值</strong> 。</p><p>「<strong>距离值</strong>」 定义为符合此描述的元素数目：对于元素 <code>arr1[i]</code> ，不存在任何元素 <code>arr2[j]</code> 满足 <code>|arr1[i]-arr2[j]| &lt;= d</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [4,5,8], arr2 &#x3D; [10,9,1,8], d &#x3D; 2</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">对于 arr1[0]&#x3D;4 我们有：</span><br><span class="line">|4-10|&#x3D;6 &gt; d&#x3D;2 </span><br><span class="line">|4-9|&#x3D;5 &gt; d&#x3D;2 </span><br><span class="line">|4-1|&#x3D;3 &gt; d&#x3D;2 </span><br><span class="line">|4-8|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">对于 arr1[1]&#x3D;5 我们有：</span><br><span class="line">|5-10|&#x3D;5 &gt; d&#x3D;2 </span><br><span class="line">|5-9|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">|5-1|&#x3D;4 &gt; d&#x3D;2 </span><br><span class="line">|5-8|&#x3D;3 &gt; d&#x3D;2</span><br><span class="line">对于 arr1[2]&#x3D;8 我们有：</span><br><span class="line">|8-10|&#x3D;2 &lt;&#x3D; d&#x3D;2</span><br><span class="line">|8-9|&#x3D;1 &lt;&#x3D; d&#x3D;2</span><br><span class="line">|8-1|&#x3D;7 &gt; d&#x3D;2</span><br><span class="line">|8-8|&#x3D;0 &lt;&#x3D; d&#x3D;2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [1,4,2,3], arr2 &#x3D; [-4,-3,6,10,20,30], d &#x3D; 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 &#x3D; [2,1,100,3], arr2 &#x3D; [-5,-2,10,-3,7], d &#x3D; 6</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li><li><code>-10^3 &lt;= arr1[i], arr2[j] &lt;= 10^3</code></li><li><code>0 &lt;= d &lt;= 100</code></li></ul><p><strong>算法1:线性扫描</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findthevalue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = arr1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr2.<span class="built_in">size</span>(); ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(arr1[i] - arr[j]) &lt;= d)&#123;</span><br><span class="line">          cnt--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法2:二分查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findthevalue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="comment">//对arr2进行排序，使用STL中的排序算法，之后即可使用二分法</span></span><br><span class="line">    sort(arr2.<span class="built_in">begin</span>(), arr2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> cnt = arr1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      <span class="comment">//使用STL库中的二分查找,得到距离</span></span><br><span class="line">      <span class="comment">//复习lower_bound的参数（数组开始，数组末尾，查找元素）</span></span><br><span class="line">      <span class="comment">//运用unsigned型变量可以直接使用距离绝对值</span></span><br><span class="line">      <span class="keyword">unsigned</span> p = lower_bound(arr2.<span class="built_in">begin</span>(), arr2.<span class="built_in">end</span>(), arr1[i]) - arr2.<span class="built_in">begin</span>();</span><br><span class="line">      book ok = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//下述步骤的学习需巩固lower_bound的相关特性。</span></span><br><span class="line">      <span class="comment">//如果能够在区间内找到接近的p值，则看最接近的值是否小于距离</span></span><br><span class="line">      <span class="keyword">if</span> (p &lt; arr2.<span class="built_in">size</span>()) ok &amp;= (arr2[p] - arr1[i] &gt; d);</span><br><span class="line">      <span class="comment">//如果p被截断，则直接看最大元素即可</span></span><br><span class="line">      <span class="keyword">if</span> (p - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; p - <span class="number">1</span> &lt;= arr2.<span class="built_in">size</span>()) ok &amp;= (arr[i] - arr[p - <span class="number">1</span>] &gt; d);</span><br><span class="line">      cnt += ok;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>STL：lower_bound算法（复杂度$O(n)$）</strong></p><p>（1）一共有三个参数：（开头，末尾，查找的值），可以用A.begin()和A.end()指定范围；</p><p>（2）返回值为<strong>不小于查找值</strong>的元素所在位置的编号（注意，编号从0开始）；否则越界截断；</p><p>（3）使用lower_bound算法需要注意两点：处理的数列已排序（sort算法），调用Algorithm库；</p><h3 id="997-找到小镇的法官"><a href="#997-找到小镇的法官" class="headerlink" title="997. 找到小镇的法官"></a>997. 找到小镇的法官</h3><p>在一个小镇里，按从 <code>1</code> 到 <code>N</code> 标记了 <code>N</code> 个人。传言称，这些人中有一个是小镇上的秘密法官。</p><p>如果小镇的法官真的存在，那么：</p><ol><li>小镇的法官不相信任何人。</li><li>每个人（除了小镇法官外）都信任小镇的法官。</li><li>只有一个人同时满足属性 1 和属性 2 。</li></ol><p>​        给定数组 <code>trust</code>，该数组由信任对 <code>trust[i] = [a, b]</code> 组成，表示标记为 <code>a</code> 的人信任标记为 <code>b</code> 的人。如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的标记。否则，返回 <code>-1</code>。 </p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：N &#x3D; 2, trust &#x3D; [[1,2]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：N &#x3D; 3, trust &#x3D; [[1,3],[2,3]]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：N &#x3D; 3, trust &#x3D; [[1,3],[2,3],[3,1]]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：N &#x3D; 3, trust &#x3D; [[1,2],[2,3]]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：N &#x3D; 4, trust &#x3D; [[1,3],[1,4],[2,3],[2,4],[4,3]]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= N &lt;= 1000</code></li><li><code>trust.length &lt;= 10000</code></li><li><code>trust[i]</code> 是完全不同的</li><li><code>trust[i][0] != trust[i][1]</code></li><li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= N</code></li></ol><p><strong>代码（信任度与被信任度）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findthejudge</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trust)</span></span>&#123;</span><br><span class="line">    <span class="comment">//开辟一个二维数组存储信任度与被信任度</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">V</span><span class="params">(N+<span class="number">1</span>, <span class="built_in">vector</span>(<span class="number">2</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trust.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      V[trust[i][<span class="number">0</span>]][<span class="number">0</span>]++;</span><br><span class="line">      V[trust[i][<span class="number">1</span>]][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span> (V[i][<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; V[i][<span class="number">1</span>] == N<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：vector的相关用法</strong></p><h4 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a>78. 子集</h4><p>给定一组<strong>不含重复元素</strong>的整数数组 <em>nums</em>，返回该数组所有可能的子集（幂集）。</p><p><strong>说明：</strong>解集不能包含重复的子集。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: nums &#x3D; [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">1</span> &lt;&lt; <span class="built_in">size</span>;<span class="comment">//N为对应的二进制数，代表总的子集数目</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; ++j)&#123;<span class="comment">//遍历，判断相应情况下取或者不取</span></span><br><span class="line">        <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j))&#123;<span class="comment">//i的二进制表示其实就是取或者不取的含义</span></span><br><span class="line">          v.push_back(nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ans.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*代码说明：</span></span><br><span class="line"><span class="comment">a &lt;&lt; b表示把a转为二进制后左移b位；</span></span><br><span class="line"><span class="comment">a &gt;&gt; b表示把a转为二进制后右移动b位；</span></span><br><span class="line"><span class="comment">&amp;运算通常用作取位操作，取二者相同的位置；</span></span><br><span class="line"><span class="comment">事实上，位运算就是把数字转化为二进制后进行操作，但存储的变量本质上仍然是十进制</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a>739. 每日温度</h4><p>根据每日 <code>气温</code> 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p>例如，给定一个列表 <code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是 <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。</p><p><strong>提示：</strong><code>气温</code> 列表长度的范围是 <code>[1, 30000]</code>。每个气温的值的均为华氏度，都是在 <code>[30, 100]</code> 范围内的整数。</p><p><strong>思路</strong></p><p>这道题最容易想到的方法就是做一个二重循环，依次找到每个温度后的最大上升天数，但很显然，时间复杂度为$O(n^2)$，很容易就超时了。</p><p>此时可以考虑使用单调栈。单调栈是一种专门对数组进行排序的数据结构，时间复杂度为$O(n)$。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>:</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = T.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="built_in">size</span>,<span class="number">0</span>)</span></span>;<span class="comment">//开辟一个长度为size的数组，初始化为0</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; res;<span class="comment">//设计一个栈，用于判断数值大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span> (res.empty()) res.push(i);<span class="comment">//如果栈为空，则放入当前元素，此处操作为防止越界问题</span></span><br><span class="line">      <span class="keyword">while</span> (!res.empty() &amp;&amp; T[j] &gt; T[res.top()])&#123; </span><br><span class="line">        ans[res.top()] = i - res.top();</span><br><span class="line">        res.pop();</span><br><span class="line">      &#125;<span class="comment">//若当前元素大于栈顶，则计算距离并存储，后去掉栈顶，继续判断</span></span><br><span class="line">      res.push(i);<span class="comment">//完成上述操作后，说明当前元素小于栈中所有元素，故将此时的元素放入栈中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2020/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="第一阶段（3月28日至正式开学）"><a href="#第一阶段（3月28日至正式开学）" class="headerlink" title="第一阶段（3月28日至正式开学）"></a>第一阶段（3月28日至正式开学）</h1><p>教材：《挑战程序设计竞赛2：算法和数据结构》</p><h3 id="第0部分：基本数据结构"><a href="#第0部分：基本数据结构" class="headerlink" title="第0部分：基本数据结构"></a>第0部分：基本数据结构</h3><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h3 id="第一部分：排序"><a href="#第一部分：排序" class="headerlink" title="第一部分：排序"></a>第一部分：排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><h4 id="归并排序：时间复杂度-O-n-log-n"><a href="#归并排序：时间复杂度-O-n-log-n" class="headerlink" title="归并排序：时间复杂度$O(n\log n)$"></a>归并排序：时间复杂度$O(n\log n)$</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENTIVITY 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L[MAX/<span class="number">2</span>+<span class="number">1</span>],R[MAX/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = mid - left;</span><br><span class="line">    <span class="keyword">int</span> n2 = right - mid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) L[i] = A[left + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; ++j) R[j] = A[mid + j];<span class="comment">//开辟两个独立数组，存储数据</span></span><br><span class="line">    L[n1] = R[n2] = SENTIVITY;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt; right; ++k)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j])&#123;</span><br><span class="line">            A[k] = L[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[k] = R[j++];</span><br><span class="line">        &#125;<span class="comment">//数据按照大小依次插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left+<span class="number">1</span> &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        mergesort(A, n, left, mid);<span class="comment">//前半部分排序</span></span><br><span class="line">        mergesort(A, n, mid, right);<span class="comment">//后半部分排序</span></span><br><span class="line">        merge(A, n, left, mid, right);<span class="comment">//融合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAX], n, i;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mergesort(A, n, <span class="number">0</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,A[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序：时间复杂度-O-n-log-n"><a href="#快速排序：时间复杂度-O-n-log-n" class="headerlink" title="快速排序：时间复杂度$O(n\log n)$"></a>快速排序：时间复杂度$O(n\log n)$</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;分割算法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;快排算法</span><br><span class="line">quickSort(A,p,r)</span><br><span class="line">    if p&lt;r</span><br><span class="line">         q&#x3D;partition(A,p,r)</span><br><span class="line">         quicksort(A,p,q-1)</span><br><span class="line">         quicksort(A,q+1,r)</span><br></pre></td></tr></table></figure><p>STL的Algorithm库中使用的也是快速排序算法，但快速排序本身是一种不稳定的算法。</p><h4 id="逆序数问题"><a href="#逆序数问题" class="headerlink" title="逆序数问题"></a>逆序数问题</h4><p>（1）基于冒泡排序实现：简单但时间复杂度高$O(n^2)$;</p><p>（2）基于归并排序实现：用到分治策略，时间复杂度$O(n\log n)$;</p><h4 id="最小成本排序问题（考虑到单次操作的权重）"><a href="#最小成本排序问题（考虑到单次操作的权重）" class="headerlink" title="最小成本排序问题（考虑到单次操作的权重）"></a>最小成本排序问题（考虑到单次操作的权重）</h4><h3 id="第二部分：数"><a href="#第二部分：数" class="headerlink" title="第二部分：数"></a>第二部分：数</h3><h4 id="第八章：树"><a href="#第八章：树" class="headerlink" title="第八章：树"></a>第八章：树</h4><p><strong>基本概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根（root）：没有父结点的结点；</span><br><span class="line">叶（leaf）：没有子结点的结点；</span><br><span class="line">内部结点：既不是根，也不是叶的结点；</span><br><span class="line">度（degree）：某一结点拥有的字结点的数目；</span><br><span class="line">深度（depth）：从根到结点的路径长度；</span><br><span class="line">有根二叉树：有根结点，且所有结点的度均不超过2；（根&#x2F;左二叉树&#x2F;右二叉树）</span><br></pre></td></tr></table></figure><p><strong>有根树的实现</strong></p><p>在C++语言中，可以使用结构体表达（左子右兄弟表示法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> parent, left, right&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">T</span>[<span class="title">MAX</span>];</span></span><br></pre></td></tr></table></figure><p>利用递归求深度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDepth</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    D[u] = p;<span class="comment">//给u结点设置为深度p（相当于设置一个起始结点）；</span></span><br><span class="line">    <span class="keyword">if</span> (T[u].r != NIL) setDepth(T(u).r, p);<span class="comment">//右兄弟：结点深度一致；</span></span><br><span class="line">    <span class="keyword">if</span> (T[u].l != NIL) setDepth(T(u).l, p+<span class="number">1</span>);<span class="comment">//左子：结点深度加一；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二叉树的表达</strong></p><p>结点用结构体表达</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> parent, left, right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>二叉树的输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123; <span class="comment">//n表示所有结点的总数目</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;v, &amp;l, &amp;r);</span><br><span class="line">  T[v].left = l;<span class="comment">//设置子结点</span></span><br><span class="line">  T[v].right = r;</span><br><span class="line">  <span class="keyword">if</span> (l != NIL) T[l].parent = v;<span class="comment">//设置父结点</span></span><br><span class="line">  <span class="keyword">if</span> (r != NIL) T[r].parent = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结点的深度利用递归方法求解（自顶向下）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDepth</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == NIL) <span class="keyword">return</span>;<span class="comment">//对于异常值，表示结束</span></span><br><span class="line">    D[u] = p;<span class="comment">//给u结点设置为深度p（相当于设置一个起始结点）；</span></span><br><span class="line">    <span class="keyword">if</span> (T[u].r != NIL) setDepth(T(u).right, p+<span class="number">1</span>);<span class="comment">//右子：结点深度加一；</span></span><br><span class="line">    <span class="keyword">if</span> (T[u].l != NIL) setDepth(T(u).left, p+<span class="number">1</span>);<span class="comment">//左子：结点深度加一；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树的高度递归法求解（自底向上）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;<span class="comment">//初始化变量</span></span><br><span class="line">  <span class="keyword">if</span> (T[u].left != NIL)</span><br><span class="line">    h1 = setHeight(T[u].left) + <span class="number">1</span>;<span class="comment">//左结点的高度基础上加一</span></span><br><span class="line">  <span class="keyword">if</span> (T[u].left != NIL)</span><br><span class="line">    h2 = setHeight(T[u].right) + <span class="number">1</span>;<span class="comment">//右结点的高度基础上加一</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>(h1, h2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>树的遍历</strong></p><p>前序遍历：根节点、左子树、右子树的顺序输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preParse</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (u == NIL) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, u);</span><br><span class="line">  preParse(T[u].left);</span><br><span class="line">  preParse(T[u].right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历：左子树、根节点、右子树的顺序输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (u == NIL) <span class="keyword">return</span>;</span><br><span class="line">  inorder(T[u].left);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, u);</span><br><span class="line">  inorder(T[u].right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历：左子树、右子树、根节点的顺序输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (u == NIL) <span class="keyword">return</span>;</span><br><span class="line">  postorder(T[u].left);</span><br><span class="line">  postorder(T[u].right);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：根据前序遍历和中序遍历的结果重建树</strong></p><p>前序遍历的第一个元素为根结点，找到其在中序遍历中的位置，分离出左右子树，之后做递归处理；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, pos;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre, in, post;<span class="comment">//用来存储前序遍历、中序遍历、后序遍历的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用递归的思想处理左右子树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> root = pre[pos++];</span><br><span class="line">  <span class="comment">//利用find函数在inorder中找到根结点，之后分割出左右子树</span></span><br><span class="line">  <span class="keyword">int</span> m = distance(in.<span class="built_in">begin</span>(), <span class="built_in">find</span>(in.<span class="built_in">begin</span>(), in.<span class="built_in">end</span>(), root));</span><br><span class="line">  rec(l, m); <span class="comment">//处理左子树</span></span><br><span class="line">  rec(m + <span class="number">1</span>, r); <span class="comment">//处理右子树</span></span><br><span class="line">  post.push_back(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将处理好后的后序遍历输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  pos = <span class="number">0</span>;</span><br><span class="line">  rec(<span class="number">0</span>, pre.<span class="built_in">size</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, post[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"/n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="comment">//输入前序遍历数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    pre.push_back(k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输入中序遍历数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    in.push_back(m);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出后序遍历结果</span></span><br><span class="line">  solve();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事实上，只要知道其中任意两种遍历结果，皆可重建第三种遍历结果；</span><br><span class="line">（1）已知中序，后序：后序的最后一个结点为根结点——在中序中可以分为左子树、右子树，从而递归处理；</span><br><span class="line">（2）已知前序遍历和后序遍历，无法唯一确定中序遍历；</span><br></pre></td></tr></table></figure><h4 id="第九章：二叉搜索树（使用指针）"><a href="#第九章：二叉搜索树（使用指针）" class="headerlink" title="第九章：二叉搜索树（使用指针）"></a>第九章：二叉搜索树（使用指针）</h4><p>设$x$为二叉搜索树的结点。如果$y$为$x$左子树中的结点，$z$为$x$右子树中的结点，则有$y\le x\le z$。如果对二叉搜索树做中序遍历，会得到一个升序的键值序列。（类似于二分法）</p><p>使用二叉树存储数据相对于使用列表时间复杂度更低，但实际结构较为复杂。</p><p><strong>二叉搜索树的结点</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> key;<span class="comment">//此处结点的键值</span></span><br><span class="line">  Node *parent, *left, *right;<span class="comment">//指向父结点与子结点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><p>从根开始，比较键值大小，大的向右搜索，小的向左搜索，从而找到空结点拓宽；时间复杂度$O(h)=O(\log n)$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> key;</span><br><span class="line">  <span class="keyword">int</span> *parent, *left, *right;</span><br><span class="line">&#125;;<span class="comment">//设置结点变量</span></span><br><span class="line"></span><br><span class="line">Node *root, *NIL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//插入操作</span></span><br><span class="line">  Node *y = NIL;</span><br><span class="line">  Node *x = root;</span><br><span class="line">  Node *z;</span><br><span class="line">  <span class="comment">//初始化Z变量，用于临时存储</span></span><br><span class="line">  z = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  z-&gt;key = k;</span><br><span class="line">  z-&gt;left = NIL;</span><br><span class="line">  z-&gt;right = NIL;</span><br><span class="line">  <span class="comment">//通过x变量循环寻找合适的位置</span></span><br><span class="line">  <span class="keyword">while</span>(x != NIL)&#123;</span><br><span class="line">    y = x;</span><br><span class="line">    <span class="keyword">if</span> (z-&gt;key &lt; x-&gt;key)&#123;</span><br><span class="line">      x = x-&gt;left;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//y变量用于作为z所在的父结点</span></span><br><span class="line">  z-&gt;parent = y;</span><br><span class="line">  <span class="keyword">if</span> (y == NIL)&#123;</span><br><span class="line">    root = z;<span class="comment">//判断z是否是第一个结点</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z-&gt;key &lt; y-&gt;key)&#123;</span><br><span class="line">      y-&gt;left = z;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      y-&gt;right = z;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node *u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (u = NIL) <span class="keyword">return</span>;</span><br><span class="line">  inorder(u-&gt;left);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, u-&gt;key);</span><br><span class="line">  inorder(u-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(Node *u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (u == NIL) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, u-&gt;key);</span><br><span class="line">  preorder(u-&gt;left);</span><br><span class="line">  preorder(u-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">string</span> com;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; com;</span><br><span class="line">    <span class="keyword">if</span> (com = <span class="string">"insert"</span>)&#123;<span class="comment">//判断操作；输入</span></span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">      insert(x);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(com = <span class="string">"print"</span>)&#123;<span class="comment">//判断操作：输出</span></span><br><span class="line">      inorder(root);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">      preorder(root);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索</strong>：时间复杂度$O(h)=O(\log n)$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node * <span class="title">find</span><span class="params">(Node *u, <span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//在u为根节点的这棵树中寻找k是否存在</span></span><br><span class="line">  <span class="keyword">while</span>(u != NIL &amp;&amp; k != u-&gt;key)&#123; <span class="comment">//u非空且未找到k值</span></span><br><span class="line">    <span class="keyword">if</span> (k &lt; u-&gt;key) u = u-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> u = u-&gt;right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong>：时间复杂度$O(h)=O(\log n)$。难点在于，删除后如何<strong>保证二叉树的基本性质</strong>。</p><p>一共有三种情况需要考虑：无结点、一结点、两结点</p><p>（1）$z$没有子结点，需要删除其父结点的子结点；</p><p>（2）$z$拥有一个子结点时，将其父结点的子结点更新为该子结点，同时该子结点变换为父结点；</p><p>（3）$z$有两个子结点时，将$z$的后一个结点$y$的键值复制到$z$，然后删除$y$。注意，此处的“后一个结点”指的是中序遍历时排在后面的那一个结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到树中最小的元素</span></span><br><span class="line"><span class="function">Node * <span class="title">treeMinimum</span><span class="params">(Node *x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(x-&gt;left != NIL) x = x-&gt;left;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算后一个结点的算法</span></span><br><span class="line"><span class="function">Node * <span class="title">treeSuccessor</span><span class="params">(Node *x)</span></span>&#123;</span><br><span class="line">  <span class="comment">//存在右子树时，最小值即是需删除的结点</span></span><br><span class="line">  <span class="keyword">if</span> (x-&gt;right != NIL) </span><br><span class="line">    <span class="keyword">return</span> treeMinimum(x-&gt;right);</span><br><span class="line">  <span class="comment">//不存在右子结点时，要向上查询</span></span><br><span class="line">  Node *y = x-&gt;parent;</span><br><span class="line">  <span class="keyword">while</span>(y != NIL &amp;&amp; x == y-&gt;right)&#123;<span class="comment">//当查到为右子树时才为后一个结点</span></span><br><span class="line">    x = y;</span><br><span class="line">    y = y-&gt;parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">treedelete</span><span class="params">(Node *z)</span></span>&#123;</span><br><span class="line">  Node *y;<span class="comment">//删除的对象</span></span><br><span class="line">  Node *x;<span class="comment">//y的子结点</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//确定删除的结点</span></span><br><span class="line">  <span class="comment">//无结点或者只有一个结点时，y就是需要删除的对象</span></span><br><span class="line">  <span class="keyword">if</span>(z-&gt;left == NIL || z-&gt;right == NIL) y = z;</span><br><span class="line">  <span class="comment">//有两个结点时</span></span><br><span class="line">  <span class="keyword">else</span> y = treeSuccessor(z);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//确定y的子结点x</span></span><br><span class="line">  <span class="keyword">if</span> (y -&gt; left != NIL)&#123;</span><br><span class="line">    x = y-&gt;left;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    x = y-&gt;right;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (x != NIL)&#123;</span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (y-&gt;parent = NIL)&#123;<span class="comment">//如果删除的是根结点</span></span><br><span class="line">    root = x;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == y-&gt;parent-&gt;left)&#123;<span class="comment">//判断是左结点还是右结点</span></span><br><span class="line">      y-&gt;parent-&gt;left = x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      y-&gt;parent-&gt;right = x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (y != z)&#123;</span><br><span class="line">    z-&gt;key = y-&gt;key;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">free</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用STL标准库管理集合</strong></p><p>（1）序列式容器：新添加的元素置于特定位置，如vector, list两种。</p><p>（2）关联式容器：依据特定的排序标准来确定存储位置。其中，set由二叉搜索树实现，能够保持搜索、插入、删除的时间复杂度为$O(\log n)$；map也是基于平衡二叉搜索树实现，但存储方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.set：根据元素值进行排序的集合，元素唯一不重复；可使用迭代器顺次访问各元素。需事先声明#include&lt;set&gt;; 初始化变量操作举例 set&lt;int&gt; S;</span><br><span class="line">size()  返回set中元素个数； </span><br><span class="line">clear() 清空整个set；</span><br><span class="line">begin() 指向set开头的迭代器； </span><br><span class="line">end()   指向set末尾的迭代器；</span><br><span class="line">insert(key)  插入元素key;</span><br><span class="line">erase(key)   删除元素key;</span><br><span class="line">find(key)    查询元素key,如果有相同的则返回该元素的迭代器，否则指向末尾end();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.map：每个元素拥有一个键与值，集合以键作为排序标准。元素唯一不重复，可用于实现“从字符串中删除字符串”这一类字典功能；需事先声明#include&lt;map&gt;，初始化举例map&lt;string,int&gt; T;</span><br><span class="line">size() 返回map中的元素个数；</span><br><span class="line">clear() 清除map中所有元素；</span><br><span class="line">begin() 返回指向map开头的迭代器；</span><br><span class="line">end() 返回指向map末尾的迭代器；</span><br><span class="line">insert((key,val)) 插入元素（key,val），分别指代具体存储内容和相对应赋予的值。</span><br><span class="line">erase(key) 删除值为key的元素；</span><br><span class="line">find(key)  查询元素key,如果有相同的则返回该元素的迭代器，否则指向末尾end();</span><br></pre></td></tr></table></figure><h4 id="第十章：堆"><a href="#第十章：堆" class="headerlink" title="第十章：堆"></a>第十章：堆</h4><p>（1）完全二叉树；所有叶结点深度相同，且所有内部结点都有两个子结点；</p><p>（2）近似完全二叉树：叶深度最大差距为1，最下层叶结点位于最左边的若干位置上；</p><p>（3）对于存储$n$个元素的完全二叉树，其树高为$\log_2 n$；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二叉堆：</span><br><span class="line">（1）逻辑结构为完全二叉树，但事实上用一位数组存储数据，通过下标进行管理</span><br><span class="line">（2）对于下标为i的结点——父结点：i&#x2F;2；左结点：2i；右结点：2i+1；</span><br></pre></td></tr></table></figure><h4 id="第十一章：动态规划法"><a href="#第十一章：动态规划法" class="headerlink" title="第十一章：动态规划法"></a>第十一章：动态规划法</h4><h4 id="第十二章：图"><a href="#第十二章：图" class="headerlink" title="第十二章：图"></a>第十二章：图</h4><h4 id="第十三章：加权图"><a href="#第十三章：加权图" class="headerlink" title="第十三章：加权图"></a>第十三章：加权图</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 保研ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六学期学习计划（日更）</title>
      <link href="/2020/03/26/%E7%AC%AC%E5%85%AD%E5%AD%A6%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%97%A5%E6%9B%B4%EF%BC%89/"/>
      <url>/2020/03/26/%E7%AC%AC%E5%85%AD%E5%AD%A6%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%88%E6%97%A5%E6%9B%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="4月6日"><a href="#4月6日" class="headerlink" title="4月6日"></a>4月6日</h2><p>（1）上午一二节：算法与数据结构、leetcode一题</p><p>（2）上午三四节：固体物理课程视频与复习</p><p>（3）下午一二节：原子核物理课程复习</p><p>（4）下午三四节：在线凸优化复习</p><p>（5）晚上：Leetcode刷题与机器学习基础知识</p><h2 id="3月31日"><a href="#3月31日" class="headerlink" title="3月31日"></a>3月31日</h2><p>（1）上午一二节：算法与数据结构第九章</p><p>（2）上午三四节与中午：leetcode训练习题（至少两道）</p><p>（3）下午一二节：大学化学课堂</p><p>（4）下午三四节：Lijun Zhang论文（COLT-2013）</p><p>（5）晚上一二三节：量子信息原理与应用</p><p>（6）晚上至睡前：完成量子信息整理与作业</p><h2 id="3月30日（完成率：7-8）"><a href="#3月30日（完成率：7-8）" class="headerlink" title="3月30日（完成率：7/8）"></a>3月30日（完成率：7/8）</h2><p>（1）上午一二节：模拟电路实验报告（完成）</p><p>（2）上午三四节：固体物理课堂（完成）</p><p>（3）午休（完成）</p><p>（4）下午一二节：原子核物理课堂（完成）</p><p>（5）下午三四节：固体物理作业（完成）</p><p>（6）晚上：算法与数据结构（第八章完成），leetcode训练（一题），lijunzhang论文（未完成）</p><h2 id="3月26日（完成率：66-）"><a href="#3月26日（完成率：66-）" class="headerlink" title="3月26日（完成率：66%）"></a>3月26日（完成率：66%）</h2><p>（1）早上一二节：数据结构与算法（完成）</p><p>（2）早上三四节：机器学习（完成）</p><p>（3）中午：助理研究项目纠错（完成）</p><p>（4）下午一二节：固体物理（完成）</p><p>（5）下午三四节：学习推荐系统实践</p><p>（6）晚上：大创数据+量子信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘笔记</title>
      <link href="/2020/02/19/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/02/19/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="PART-I-INTRODUCTION"><a href="#PART-I-INTRODUCTION" class="headerlink" title="PART I INTRODUCTION"></a>PART I INTRODUCTION</h1><p>第四范式：基于数据认知，世界中每一个对象都对应于数据；</p><h2 id="2月19日"><a href="#2月19日" class="headerlink" title="2月19日"></a>2月19日</h2><p>Advances in technology：Hardware, software, internet;</p><p>Big data have big values;</p><h3 id="Why-Data-Mining"><a href="#Why-Data-Mining" class="headerlink" title="Why Data Mining?"></a>Why Data Mining?</h3><p>Knowledge, hidden relationships, underlying reality;</p><h5 id="Example-I-Mining-supermarket-transactions"><a href="#Example-I-Mining-supermarket-transactions" class="headerlink" title="Example I Mining supermarket transactions"></a>Example I Mining supermarket transactions</h5><h5 id="Example-II-Mining-the-valuable-customers"><a href="#Example-II-Mining-the-valuable-customers" class="headerlink" title="Example II Mining the valuable customers"></a>Example II Mining the valuable customers</h5><h5 id="Example-III-Mining-network-intrusion-patterns"><a href="#Example-III-Mining-network-intrusion-patterns" class="headerlink" title="Example III Mining network intrusion patterns"></a>Example III Mining network intrusion patterns</h5><h5 id="Example-IV-Mining-gene-data"><a href="#Example-IV-Mining-gene-data" class="headerlink" title="Example IV Mining gene data"></a>Example IV Mining gene data</h5><h5 id="Example-V-Mining-medical-data"><a href="#Example-V-Mining-medical-data" class="headerlink" title="Example V Mining medical data"></a>Example V Mining medical data</h5><p>computer-aided diagnosis;</p><h5 id="Example-VI-Mining-the-web"><a href="#Example-VI-Mining-the-web" class="headerlink" title="Example VI Mining the web"></a>Example VI Mining the web</h5><p>web structure, web content, web usage, web logs</p><p>interesting patterns, behavior identification</p><h5 id="Example-VII-Mining-financial-data"><a href="#Example-VII-Mining-financial-data" class="headerlink" title="Example VII Mining financial data"></a>Example VII Mining financial data</h5><p>fraud detection</p><p>stock trends discovery </p><h5 id="Example-VIII-Mining-software-data"><a href="#Example-VIII-Mining-software-data" class="headerlink" title="Example VIII Mining software data"></a>Example VIII Mining software data</h5><p>improve the software quality, productivity and user experience</p><p>automated debugging</p><h5 id="Example-IX-Mining-usage-data"><a href="#Example-IX-Mining-usage-data" class="headerlink" title="Example IX Mining usage data"></a>Example IX Mining usage data</h5><h5 id="Example-X-Mining-data-from-sensors"><a href="#Example-X-Mining-data-from-sensors" class="headerlink" title="Example X Mining data from sensors"></a>Example X Mining data from sensors</h5><p>技术要自主可控；</p><h5 id="Example-XI-Mining-data-of-arts"><a href="#Example-XI-Mining-data-of-arts" class="headerlink" title="Example XI Mining data of arts"></a>Example XI Mining data of arts</h5><h5 id="Example-XII-Audio-Generation"><a href="#Example-XII-Audio-Generation" class="headerlink" title="Example XII Audio Generation"></a>Example XII Audio Generation</h5><h5 id="Example-XIII-Image-Video-Editing"><a href="#Example-XIII-Image-Video-Editing" class="headerlink" title="Example XIII Image/Video Editing"></a>Example XIII Image/Video Editing</h5><p>more and more applications</p><p>对于不同的数据，性质不同，分析的技术不同；</p><p>Data mining is non-trivial process of identifying valid, novel, potentially useful, and ultimately understandable.</p><p>core: machine learning</p><h3 id="KDD-Knowledge-Discoverty-in-Data"><a href="#KDD-Knowledge-Discoverty-in-Data" class="headerlink" title="KDD: Knowledge Discoverty in Data"></a>KDD: Knowledge Discoverty in Data</h3><h3 id="What-kind-of-data-can-be-mined"><a href="#What-kind-of-data-can-be-mined" class="headerlink" title="What kind of data can be mined?"></a>What kind of data can be mined?</h3><p>(1) “Flat” data: table or data matrix</p><p><em>Attribute varible fields features</em></p><p>(2) Data warehouse: statistic option, data language (make decisions)</p><p>(3) Text data</p><p>(4) Multimedia data: image, audio, video</p><p>(5) Web date</p><p>(6) Social network data</p><p>(7) Temporal and spatial data</p><h3 id="How-to-categorize-data-mining-tasks"><a href="#How-to-categorize-data-mining-tasks" class="headerlink" title="How to categorize data mining tasks?"></a>How to categorize data mining tasks?</h3><p>(1) Descriptive mining tasks.</p><p>(2) Predictive mining tasks.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS精英挑战营（2020年寒假班）</title>
      <link href="/2020/02/02/CS%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%90%A5/"/>
      <url>/2020/02/02/CS%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%90%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习导论</title>
      <link href="/2020/02/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/02/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
